# -*- coding: utf-8 -*-
"""Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qSBbAQqTkhdmYf2H9BSO7ci-b1JJ5pq-
"""

import numpy as np

class Node:
    def __init__(self, d):
        self.data = d
        self.left = None
        self.right = None
 

def BST(A):
      
    if not A:
        return None
 
    # find middle
    mid = int((len(A)) / 2)
      
    # make the middle element the root
    root = Node(A[mid])
      
    # left subtree of root has all
    # values <arr[mid]
    root.left = BST(A[:mid])
      
    # right subtree of root has all  
    # values >arr[mid]
    root.right = BST(A[mid+1:])
    return root
 

 
def InOrder(node):
    if not node:
        return
      
     
    InOrder(node.left)
    print(node.data)
    InOrder(node.right)


A = list(np.random.randint(low=1,high=100,size=10))
A.sort()
 
root = BST(A)
InOrder(root)